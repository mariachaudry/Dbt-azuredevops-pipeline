parameters:
  - name: environment_list
    type: string
    default: 'dev'

  - name: pool_name
    type: object
    default:
      dev: 'Three-Azure-Agent'
      sit: 'Three-Azure-Agent'
      uat: 'Three-Azure-Agent'
      nft: 'Three-Azure-Agent'

  - name: env_depends_on
    type: object
    default:
      sit:
        - dev
      uat:
        - sit
      prd:
        - uat

  - name: source_folder
    type: string
    default: 'dbt'
    values:
      - dbt

stages:
  - ${{ each environment in split(parameters.environment_list, ',') }}:
      - stage: "${{ environment }}_PLAN"
        dependsOn:
          - ${{ each dependant_env in parameters.env_depends_on[environment] }}:
              - ${{ if containsValue(split(parameters.environment_list, ','), dependant_env) }}:
                  - "${{ dependant_env }}_PLAN"
        displayName: "${{ upper(environment) }} PLAN"
        pool:
          name: ${{ parameters.pool_name[environment] }}
        jobs:
          - deployment: "Artifact_Download"
            environment: "terraform_dbt_${{ lower(environment) }}"
          - job: "${{parameters.source_folder}}_ResourceCreation"
            variables:
              - group: "dbt_${{ lower(environment) }}_terraform"
            steps:
              - script: |
                  echo "project: $(resources.pipeline.data3-dataops-infrastructure-dbt-ci.projectName)"
                  echo "project: id $(resources.pipeline.data3-dataops-infrastructure-dbt-ci.projectID)"
                  echo "buildId : $(resources.pipeline.data3-dataops-infrastructure-dbt-ci.pipelineID)"
                displayName: "Pipeline Resource variables"
              - task: InstallSSHKey@0
                displayName: 'Install an SSH key'
                inputs:
                  knownHostsEntry: '$(ado_ssh_key_known_hosts)'
                  sshPublicKey: '$(ado_ssh_key_public_key)'
                  sshPassphrase: '$(ado_ssh_key_passphrase)'
                  sshKeySecureFile: 'ado_git_id_rsa'
                
              - task: DownloadSecureFile@1
                displayName: downloadFile
                inputs:
                  secureFile: 'rsa_key.p8'
          
              - task: qetza.replacetokens.replacetokens-task.replacetokens@5
                displayName: 'Replace tokens in **/*.tf'
                inputs:
                  targetFiles: '**/*.tf'
                  tokenPattern: rm
              
              - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                displayName: 'Install Terraform latest'
                inputs:
                  terraformVersion: 'latest '
              
              - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
                displayName: 'Terraform : init'
                inputs:
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/${{ parameters.source_folder }}/${{ parameters.source_folder }}-tf'
                  commandOptions: '-no-color'
                  backendServiceArm: 'dataops_mgt'
                  backendAzureRmResourceGroupName: 'mgt-rg-data3-dataops-iac'
                  backendAzureRmStorageAccountName: envstrdata3dataopsterra
                  backendAzureRmContainerName: dev
                  backendAzureRmKey: 'terraform_${{ parameters.source_folder }}.tfstate'
              - task: DownloadPipelineArtifact@2
                inputs:
                  buildType: 'specific'
                  project: $(resources.pipeline.data3-dataops-infrastructure-dbt-ci.projectID)
                  definition: data3-dataops-infrastructure-dbt-ci
                  artifactName: '${{ parameters.source_folder }}-tf'
                  specificBuildWithTriggering: true
                  downloadPath: $(build.artifactstagingdirectory)
                  buildVersionToDownload: 'specific'
                  runId: $(resources.pipeline.data3-dataops-infrastructure-dbt-ci.runID)
                  retryCountOnTaskFailure: 1

      - stage: "${{ environment }}_APPLY"
        displayName: "${{ upper(environment) }} APPLY"
        dependsOn: "${{ environment }}_PLAN"
        jobs:
          - deployment: "Artifact_Download"
            environment: "terraform_dbt_${{ lower(environment) }}"
          - job: "${{ environment }}_APPLY"
            steps:
              - script: echo running "${{ environment }}_APPLY"

